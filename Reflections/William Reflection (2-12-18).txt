REFLECTION for 2/11/18 (William)

The goal was to create the four pages we needed for the app: the main, the exercise, the activity map and the nutrition app. We also sought to embed the custom google map for the activity map page. 

Fortunately, we managed to fulfill almost all of these components with the exception of the custom google map. I failed to implement the map properly because there is still a knowledge gap of how android apps work to properly implement the map. I relied on tutorials and reference guides to create the main page, but that approach is a bad idea for the remaining parts of the app. Given that now we are delving into some very specific designs and purposes for our app, it’s not as easy to find a generic template online to fill in the blanks. Now I have to actually understand each component of what an api does for proper implementation. Thus, I need to do a little foundational work on my kotlin/java skills to make any meaningful process.

Implementing the map still takes the most precedence given Prof. Raney’s insistence on the map. Following that, we will need to settle on a UI design to implement for each of the pages. This will probably take the most time considering we have three pages to address. I believe this takes precedence because the amount of data we need to put in the app is not important. Once the process is complete for one data set, importing the rest is fairly automated. However, if we have a UI design that is unintuitive and ugly, it really won’t matter what kind of filters or data we put into the app. It’ll never be accessible. 

Our estimates of the community partner’s priorities were slightly off. I think we estimated that the exercise and nutrition pages would be the most important to address given that it’s all original content. However, it’s clear from the meetings the map take priority. 

I’m still hopeful that we can successfully build an app that is intuitive and engaging. Developing a lifestyle app is not an unprecedented project so we have more resources than the other groups. However, I am concerned about how much I still have to learn about Java/Kotlin. It’s strange to be able to integrate actual hardware and software along with coding programs that do not just take inputs inside the interpreter console i.e typing stuff into intelliJ. 
